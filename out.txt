Start.
Initializing graphics and camera.
Init camera output with 640/640
Creating pool with 3 buffers of size 614400
Camera successfully created
Compiled vertex shader ./shaders/auxiliary/vertices.glsl:
attribute vec4 vertex;
uniform vec2 offset;
uniform vec2 scale;
varying vec2 tcoord;
void main(void) 
{
	vec4 pos = vertex;
	tcoord.xy = pos.xy;
	pos.xy = pos.xy*scale+offset;
	gl_Position = pos;

}

Compiled fragment shader ./shaders/auxiliary/copy.glsl:
varying vec2 tcoord;
uniform sampler2D tex;
void main(void) 
{
    gl_FragColor = texture2D(tex,tcoord);
}

Compiled fragment shader ./shaders/auxiliary/yuvtorgba_dedonut.glsl:
varying vec2 tcoord;
uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D maptex;
void main(void) 
{
	float y = texture2D(tex0,texture2D(maptex,tcoord).rg).r;
	float u = texture2D(tex1,texture2D(maptex,tcoord).rg).r;
	float v = texture2D(tex2,texture2D(maptex,tcoord).rg).r;

	vec4 res;
	res.r = (y + (1.370705 * (v-0.5)));
	res.g = (y - (0.698001 * (v-0.5)) - (0.337633 * (u-0.5)));
	res.b = (y + (1.732446 * (u-0.5)));
	res.a = 1.0;

    gl_FragColor = clamp(res,vec4(0),vec4(1));
}

Compiled fragment shader ./shaders/summer_hor.glsl:
/*
HORIZONTAL SUMMER SHADER
This comes after thresholding: its input is the texture which has the color-thresholded version of the input image. its output is a texture that has equal height as the input image, but only 1 pixel in width.
That is because we want to store the sums of each row in a single pixel.

WHAT SHOULD IT DO:
put the sum of each pixel row in a pixel of the output. Note that this is done in a normalized way: output 
between 0.0 and 1.0. This is because that is the only range we can put - 1.0 will become 255 when coming back
to the host. Therefore we normalize by dividing it by the total amount of pixels in the row.

HOW DOES IT WORK NOW:
Pretty straightforward: iterates over its row (remember that the shader is called once for each output pixel, so each shader call will be responsible for doing one row of summing) and stores the sum in RED component.
Right now it also stores a "boolean" value in the BLUE component: if the sum was nonzero, the blue is set to maximum. This is only so that we can easily see it on the preview screen, but serves no "real purpose"!

WHAT NEEDS TO BE DONE:
We will have separate summing of red and blue pixels in the threshold stage later. This should be adapted to also sum them separately.
*/

//VARYING AND UNIFORM VARIABLES: AUTOMATICALLY SET BEFORE STARTING (BY HOST OR VERTEX SHADER)
varying vec2 tcoord;		//gives our own coordinate as normalized floating point (x,y)
uniform sampler2D tex;		//thresholded input texture
uniform float step;

void main(void)
{
	//make the sum variable
	float sum_red	= 0.0;
	float sum_blue	= 0.0;
	float pos = tcoord[0];
	//iterate over 64 source pixels using this step, summing their content	
	for(int i=0;i<64;i++){
		vec4 pixel = texture2D(tex,vec2(pos,tcoord[1]));
		sum_red = sum_red + pixel.r;
		sum_blue = sum_blue + pixel.b;
		pos = pos + step;
	}

	float result_red = sum_red/32.0;
	float result_blue = sum_blue/32.0;
	
	//store the output pixel
	//gl_FragColor = vec4(result,0.0,0.0,1.0);
	gl_FragColor = vec4(result_red>0.0?1.0:0.0,0.0,result_blue>0.0?1.0:0.0,1.0);
}

Compiled fragment shader ./shaders/summer_ver.glsl:
/*
VERTICAL SUMMER SHADER

This is almost identical to the horizontal summer shader. Please see that one for comments and explanation.
*/

varying vec2 tcoord;
uniform sampler2D tex;
uniform float step;

void main(void)
{
	//make the sum variable
	float sum_red = 0.0;
	float sum_blue = 0.0;
	float pos = tcoord[1];
	//iterate over 64 source pixels using this step, summing their content	
	for(int i=0;i<64;i++){
	    vec4 pixel = texture2D(tex,vec2(tcoord[0],pos));
		sum_red = sum_red + pixel.r;
		sum_blue = sum_blue + pixel.b;
		pos = pos + step;
	}

	float result_red = sum_red/32.0;
	float result_blue = sum_blue/32.0;
	//store the output pixel
	//gl_FragColor = vec4(result,0.0,0.0,1.0);
	gl_FragColor = vec4(result_red>0.0?1.0:0.0,0.0,result_blue>0.0?1.0:0.0,1.0);
}

Compiled fragment shader ./shaders/thresholdshader.glsl:
/*
THRESHOLD SHADER
This is the first shader in the pipeline here (although on the pi it will be preceded by the one that does YUV->RGB and panoramic-making).
Its input is the RGBA, panoramic input image texture.

WHAT SHOULD IT DO:
It should give the texture which is ready to have the summation techniue applied: the color-thresholded texture. That means RGB->HSV transformation is needed, then some thresholding. But also, if needed, it should do pre-steps such as gaussian blur, erosion, etc to reduce noise. It doesn't do that at the moment.

HOW DOES IT WORK NOW:
remember that it is a shader: it gets called for every single output pixel. Since for this shader the output texture has the same dimensions as the input, it also corresponds to one INPUT pixel.
So all it does at the moment is:
- take its corresponding input pixel
- transform it to HSV
- do thresholding
- make the output pixel (gl_FragColor) white or black depending on the result.

WHAT NEEDS TO BE DONE:
First of all: right now this only thresholds one value (red), and makes the output white or black. We want to distinguish red and blue objects though. So what we could do is make two thresholds. We can store the results of both thresholds in the RED and BLUE components of the output pixel. So if a red object was found, the output pixel will become fully red, if a blue object was found, the output pixel will be fully BLUE.
Second: we need some filters to improve noise performance. You know this better than me! But likely we need gaussian blur and erosion. 
We should avoid re-inventing the wheel. The example code that the PI project was based on is here:
http://robotblogging.blogspot.nl/2013/10/gpu-accelerated-camera-processing-on.html
and the guy had already made GLSL shaders for erosion, gaussian blur and even sobel filtering. Re-use what can be re-used!
It would be great if we can integrate all those steps into this single shader, to avoid having to store even more textures in memory. But if it is impossible for some reason, you can ask me to add another rendering pipeline step(s) before or after this shader to do filtering.
*/

//VARYING AND UNIFORM VARIABLES: AUTOMATICALLY SET BEFORE STARTING (BY HOST OR VERTEX SHADER)
varying vec2 tcoord; //gives our own coordinate as normalized floating point (x,y)
uniform sampler2D tex; //input texture (panoramic camera image in RGBA)

vec3 rgb2hsv(vec3 c) //this function converts a vec3 pixel from RGB to HSV. (copied from example code)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) //this function converts a vec3 pixel from HSV to RGB. (copied from example code)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 doThreshold(vec3 hsv) //this function does the thresholding on a RGB pixel, including HSV conversion.
{
    vec3 outThreshold;
	outThreshold	= vec3(0.0,0.0,0.0);
    if((hsv[0] >= 0.0) && (hsv[0] <= 0.1) && (hsv[1] > 0.3) && (hsv[2] > 0.3)) outThreshold[0] = 1.0;
	if((hsv[0] >= 0.40) && (hsv[0] <= 0.85) && (hsv[1] > 0.3) && (hsv[2] > 0.3)) outThreshold[2] = 1.0;
	return outThreshold;
}

vec3 colorize(vec3 c) //unused right now: converts to HSV then back to RGB with maximum S and V ("colorize")
{
    vec3 hsv = rgb2hsv(c);
    return hsv2rgb(vec3(hsv[0], 1, 1));
}

vec3 colorizeSelect(vec3 c) //unused right now: colorize but with a brightness threshold included.
{
    vec3 hsv = rgb2hsv(c);
    if((hsv[1] > 0.15) && (hsv[2] > 0.3)) return hsv2rgb(vec3(hsv[0], 1, 1));
    return vec3(0,0,0);
}

//MAIN FUNCTION
void main(void)
{
    vec3 hsv = rgb2hsv(texture2D( tex, tcoord).rgb);
	gl_FragColor = vec4(doThreshold(hsv), texture2D(tex,tcoord).a);
	//gl_FragColor = vec4(colorizeSelect(texture2D( tex, tcoord).rgb), texture2D(tex,tcoord).a);
}
Created program id 7 from vs 1 and fs 2
7:program:

Created program id 8 from vs 1 and fs 3
8:program:

Created program id 9 from vs 1 and fs 4
9:program:

Created program id 10 from vs 1 and fs 5
10:program:

Created program id 11 from vs 1 and fs 6
11:program:

Camera resolution: 640x640
Creating Textures.
Max texture size: 3379
Dedonut: 2010x153
Starting process loop.
[?1049h[1;24r(B[m[4l[?7h[?1h=[H[2Jsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
Framerate: 4.92349[1;31HControls:[3dCPU Total: 8[4dCPU1: 1[4;31Harrow keys: move bot[5dCPU2: 31[5;31Hs: show snapshot window[6dCPU3: 2[6;31Hw: save framebuffers[7dCPU4: 0[7;31Hr: turn HDMI live rendering on/off[8;31Hq: quit[9dLeft Speed: 0[10dRight Speed: 0[12dI2C ON[13dHDMI OFF[15dmsec Curses: 0[16dmsec Readframe: 0[17dmsec Putframe: 10[18dmsec Draw: 180[19dmsec Getdata: 10[21dNo blue objects found.sum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;12H29.4548[3;12H7[4;7H0[5d25[6d0[17;16H7[K[18;13H1[K[19d 13[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.0032[17;16H9[19d6[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;17H0[3;12H5[5;8H0[17;16H7[19d8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;12H18.307[3;12H9[4;7H16[16;17H21[19;16H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.6874[3;12H3[4;7H0 [5d0 [6d14[16;17H34[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.1675[3;12H4[16;18H2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;16H217[3;12H7[4;7H14[5d12[6d0 [21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.5689[3;12H3[4;7H0 [5d0 [6d14[16;18H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.3156[3;12H0[6;7H0 [16;18H1[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H1417[3;12H7[6;7H28[16;18H2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.6825[3;12H12[4;7H12[5d12[6d5[16;18H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2692[3;12H0[K[4;7H0 [5d0 [6d0 [16;18H1[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.545[3;12H4[5;7H14[16;18H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.633[3;12H3[5;7H0 [6d14[16;18H0[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.84[3;12H4[16;18H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H2.3821[3;12H0[6;7H0 [16;18H2[17;16H19[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H7.8512[3;12H4[6;7H16[16;17H19[17;16H7[K[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.4755[3;12H7[4;7H14[16;17H31[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.7956[3;12H8[16;17H26[17;16H7[19d2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9398[3;12H3[4;7H0 [16;17H30[19;16H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H8513[3;12H0[6;7H0 [17;16H8[19d2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2314[3;12H4[4;7H14[16;17H29[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.2142[3;12H3[4;7H0 [6d16[16;17H33[19;16H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.6591[3;12H0[6;7H0 [16;17H27[17;16H8[19d2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0642[3;12H3[6;7H14[16;18H9[17;16H7[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H1126[3;12H0[6;7H0 [19;16H2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.799 [16;17H30[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H5104[3;12H3[4;7H16[16;18H1[19;16H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.324 [3;12H7[6;7H14[16;17H28[17;16H7[18;13H5[19d 12[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0023[3;12H4[4;7H0 [17;16H8[18;13H4[19d 13[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H3852[4;7H16[6d0 [17;16H7[19d2[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9397[3;12H3[4;7H0 [6d14[16;18H9[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H3.9673[16;17H32[17;16H8[19d4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.271[3;12H4[16;17H24[17;16H7[18;13H4[19d 12[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.7392[3;12H0[6;7H0 [16;17H30[17;16H8[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.1149[3;12H4[5;7H14[16;17H28[18;13H6[19d 11[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;16H505[3;12H8[4;7H16[17;16H7[18;13H4[19d 12[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.4039[3;12H6[4;8H4[5d0 [6d12[16;17H31[17;16H8[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.549 [3;12H8[4;8H6[6d6[16;17H27[18;13H5[19d 12[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0539[3;12H7[4;7H25[6d0 [16;18H9[17;16H7[18;13H4[19d 13[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.6666[3;12H0[4;7H0 [16;17H30[17;16H8[18;13H5[19d 12[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.302 [16;17H28[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.6109[3;12H3[4;7H14[16;17H31[17;16H7[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.5036[3;12H4[4;7H0 [5d14[16;17H27[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9047[3;12H7[5;7H25[16;18H9[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.0013[3;12H8[4;7H16[5d0 [6d14[17;16H7[18;13H4[19d 13[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.7755[3;12H0[4;7H0 [6d0 [16;17H30[17;16H8[19d2[21;23Hr[Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H1.822 [3;12H5[4;7H12[5d11[13dN[K[18;12H39[19d 4[K[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;12H20.2734[3;12H23[4;7H33[5d40[6d20[16;17H9[K[17d7[18;12H25[19d 3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;12H14.8491[3;12H8[K[4;7H0 [5d2[6d14[16;17H27[17;16H8[18;13H6[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.02  [3;12H4[5;7H16[6d0 [18;13H5[19d 4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H3081[3;12H8[5;7H20[6d14[17;16H7[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H3.9916[3;12H7[5;7H0 [6d25[16;17H31[17;16H8[18;13H4[19d 5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.9634[3;12H4[6;7H16[16;17H23[18;13H5[19d 3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H1805[3;12H0[6;7H0 [16;18H7[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9223[3;12H8[5;7H28[16;18H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;17H57[3;12H0[5;7H0 [19;15H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H2184[3;12H7[5;7H16[6d14[16;17H30[19;15H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.6815[3;12H4[6;7H0 [16;17H25[19;15H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H4138[5;7H0 [6d16[16;18H7[17;16H8[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9023[5;7H16[6d0 [16;18H8[17;16H7[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;16H847[3;12H8[4;7H16[5d4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0784[3;12H7[4;8H2[5d0 [6d14[16;17H30[17;16H8[19d5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.3303[3;12H4[4;7H0 [5d16[6d0 [16;17H23[17;16H7[18;13H4[19d 3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.489 [3;12H3[4;7H14[5d0 [16;18H9[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2673[3;12H4[4;7H0 [5d16[16;18H7[17;16H8[18;13H4[19d 4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H1694[3;12H12[4;7H16[5d0 [6d25[16;18H8[17;16H7[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.519 [3;12H7[K[4;7H0 [5d28[6d0 [16;17H30[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.4364[4;7H14[5d14[16;17H26[17;16H8[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H1955[3;12H4[4;7H0 [5d6[16;18H8[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.5477[3;12H0[5;7H0 [16;17H30[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2313[3;12H11[5;7H28[6d14[16;17H27[17;16H8[19d4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.1896[3;12H3[K[5;7H14[6d0 [16;17H30[19;15H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.1519[3;12H0[5;7H0 [16;17H24[17;16H7[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.8868[3;12H7[5;7H16[6d14[16;18H9[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H9495[3;12H0[5;7H0 [6d0 [16;18H8[17;16H7[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H8551[3;12H7[4;7H14[5d14[16;18H9[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0706[4;7H20[5d0 [6d14[16;17H30[17;16H8[18;13H5[19d 6[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.2629[3;12H12[6;7H28[16;17H23[17;16H7[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9574[3;12H4[K[4;7H0 [6d14[16;18H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;17H0[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2017[3;12H8[4;7H16[6d6[17;16H7[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H3.7782[3;12H0[4;7H0 [6d0 [16;17H32[17;16H8[19d5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.356[3;12H12[4;7H16[6d16[7d16[16;17H2[19;15H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.1575[3;12H8[K[4;8H4[6d0 [16;18H8[17;16H7[19d4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9774[3;12H7[4;8H6[7d4[19;15H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H8878[3;12H4[4;7H0 [6d16[7d0 [16;18H9[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H1259[3;12H0[6;7H0 [16;17H31[17;16H7[19d5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.7027[3;12H4[6;7H16[16;17H25[19;15H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0732[3;12H0[6;7H0 [16;18H7[17;16H8[18;13H5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H4208[3;12H4[6;7H16[17;16H7[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0904[3;12H11[6;7H37[16;18H9[18;13H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.4025[3;13H0[6;8H3[16;17H32[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.664[3;12H0[K[6;7H0 [16;17H26[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.5732[3;12H4[7;7H14[16;17H30[17;16H8[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.151 [6;7H16[7d0 [16;17H28[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;16H789[3;12H7[6;8H4[7d16[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.526[6;7H0 [7d25[16;17H31[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.3442[3;12H4[6;7H16[7d0 [16;17H27[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H2519[3;12H11[6;7H25[7d16[16;18H8[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.637 [3;12H0[K[6;7H0 [7d0 [16;17H31[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.208[3;12H11[6;7H16[7d25[16;17H28[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.6996[3;12H4[K[6;8H4[7d0 [16;17H31[17;16H7[18;13H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.4623[6;7H0 [7d16[16;17H27[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9014[3;12H7[6;7H28[7d0 [16;18H9[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2038[3;12H8[6;7H14[7d16[16;18H8[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.600[3;12H4[6;7H0 [16;17H31[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0782[3;12H7[6;7H25[7d0 [16;18H0[17;16H8[18;13H5[19d 5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.1738[3;12H8[6;8H8[16;17H23[17;16H7[18;13H4[19d 3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.1212[3;12H4[6;7H16[16;18H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.9474[3;12H8[7;7H14[16;18H9[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2198[3;12H0[6;7H0 [7d0 [16;18H8[17;16H7[18;13H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H3.8605[3;12H10[6;7H14[7d25[16;17H32[18;13H4[19d 5[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H6.0781[3;12H8[K[6;7H0 [7d8[16;17H24[17;16H8[19d3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2362[3;12H7[6;7H14[7d16[16;18H8[17;16H7[18;13H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0353[3;12H8[4;7H12[6d6[7d0 [16;18H9[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.8751[3;12H7[4;7H0 [6d4[7d16[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H5077[6;8H6[7d4[16;17H31[17;16H7[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H5.2208[3;12H4[7;7H0 [16;17H28[17;16H8[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H3097[6;7H0 [7d16[18;13H3[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H095[3;12H7[7;7H25[16;18H9[17;16H7[18;13H4[21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;13H4.901 [3;12H4[6;7H16[7d0 [21;23Hsum 0
sum 0
sum 0
sum 0
sum 7
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
sum 0
[1;15H0192[3;12H10[6;7H25[7d14[16;17H31[17;16H8[18;13H3[19d 6[21;23Hq[24;1H[?1049l[?1l>